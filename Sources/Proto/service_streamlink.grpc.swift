//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: service_streamlink.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Pb_StreamlinkClient`, then call methods of this protocol to make API calls.
internal protocol Pb_StreamlinkClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Pb_StreamlinkClientInterceptorFactoryProtocol? { get }

  func messageStream(
    callOptions: CallOptions?,
    handler: @escaping (Pb_MessageResponse) -> Void
  ) -> BidirectionalStreamingCall<Pb_MessageRequest, Pb_MessageResponse>
}

extension Pb_StreamlinkClientProtocol {
  internal var serviceName: String {
    return "pb.Streamlink"
  }

  /// Bidirectional stream for sending and receiving messages
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func messageStream(
    callOptions: CallOptions? = nil,
    handler: @escaping (Pb_MessageResponse) -> Void
  ) -> BidirectionalStreamingCall<Pb_MessageRequest, Pb_MessageResponse> {
    return self.makeBidirectionalStreamingCall(
      path: Pb_StreamlinkClientMetadata.Methods.messageStream.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMessageStreamInterceptors() ?? [],
      handler: handler
    )
  }
}

@available(*, deprecated)
extension Pb_StreamlinkClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Pb_StreamlinkNIOClient")
internal final class Pb_StreamlinkClient: Pb_StreamlinkClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Pb_StreamlinkClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Pb_StreamlinkClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the pb.Streamlink service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Pb_StreamlinkClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Pb_StreamlinkNIOClient: Pb_StreamlinkClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Pb_StreamlinkClientInterceptorFactoryProtocol?

  /// Creates a client for the pb.Streamlink service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Pb_StreamlinkClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Pb_StreamlinkAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Pb_StreamlinkClientInterceptorFactoryProtocol? { get }

  func makeMessageStreamCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<Pb_MessageRequest, Pb_MessageResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Pb_StreamlinkAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Pb_StreamlinkClientMetadata.serviceDescriptor
  }

  internal var interceptors: Pb_StreamlinkClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeMessageStreamCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<Pb_MessageRequest, Pb_MessageResponse> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Pb_StreamlinkClientMetadata.Methods.messageStream.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMessageStreamInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Pb_StreamlinkAsyncClientProtocol {
  internal func messageStream<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Pb_MessageResponse> where RequestStream: Sequence, RequestStream.Element == Pb_MessageRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Pb_StreamlinkClientMetadata.Methods.messageStream.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMessageStreamInterceptors() ?? []
    )
  }

  internal func messageStream<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Pb_MessageResponse> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Pb_MessageRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Pb_StreamlinkClientMetadata.Methods.messageStream.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMessageStreamInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Pb_StreamlinkAsyncClient: Pb_StreamlinkAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Pb_StreamlinkClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Pb_StreamlinkClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Pb_StreamlinkClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'messageStream'.
  func makeMessageStreamInterceptors() -> [ClientInterceptor<Pb_MessageRequest, Pb_MessageResponse>]
}

internal enum Pb_StreamlinkClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Streamlink",
    fullName: "pb.Streamlink",
    methods: [
      Pb_StreamlinkClientMetadata.Methods.messageStream,
    ]
  )

  internal enum Methods {
    internal static let messageStream = GRPCMethodDescriptor(
      name: "MessageStream",
      path: "/pb.Streamlink/MessageStream",
      type: GRPCCallType.bidirectionalStreaming
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Pb_StreamlinkProvider: CallHandlerProvider {
  var interceptors: Pb_StreamlinkServerInterceptorFactoryProtocol? { get }

  /// Bidirectional stream for sending and receiving messages
  func messageStream(context: StreamingResponseCallContext<Pb_MessageResponse>) -> EventLoopFuture<(StreamEvent<Pb_MessageRequest>) -> Void>
}

extension Pb_StreamlinkProvider {
  internal var serviceName: Substring {
    return Pb_StreamlinkServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "MessageStream":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pb_MessageRequest>(),
        responseSerializer: ProtobufSerializer<Pb_MessageResponse>(),
        interceptors: self.interceptors?.makeMessageStreamInterceptors() ?? [],
        observerFactory: self.messageStream(context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Pb_StreamlinkAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Pb_StreamlinkServerInterceptorFactoryProtocol? { get }

  /// Bidirectional stream for sending and receiving messages
  func messageStream(
    requestStream: GRPCAsyncRequestStream<Pb_MessageRequest>,
    responseStream: GRPCAsyncResponseStreamWriter<Pb_MessageResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Pb_StreamlinkAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Pb_StreamlinkServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Pb_StreamlinkServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Pb_StreamlinkServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "MessageStream":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pb_MessageRequest>(),
        responseSerializer: ProtobufSerializer<Pb_MessageResponse>(),
        interceptors: self.interceptors?.makeMessageStreamInterceptors() ?? [],
        wrapping: { try await self.messageStream(requestStream: $0, responseStream: $1, context: $2) }
      )

    default:
      return nil
    }
  }
}

internal protocol Pb_StreamlinkServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'messageStream'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMessageStreamInterceptors() -> [ServerInterceptor<Pb_MessageRequest, Pb_MessageResponse>]
}

internal enum Pb_StreamlinkServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Streamlink",
    fullName: "pb.Streamlink",
    methods: [
      Pb_StreamlinkServerMetadata.Methods.messageStream,
    ]
  )

  internal enum Methods {
    internal static let messageStream = GRPCMethodDescriptor(
      name: "MessageStream",
      path: "/pb.Streamlink/MessageStream",
      type: GRPCCallType.bidirectionalStreaming
    )
  }
}
