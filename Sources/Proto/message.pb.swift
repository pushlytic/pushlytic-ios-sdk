// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: message.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Metadata operations for clearing or updating
enum Pb_MetadataOperation: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// No operation
  case metadataNoop // = 0

  /// Update metadata with new value
  case metadataUpdate // = 1

  /// Clear existing metadata
  case metadataClear // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .metadataNoop
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .metadataNoop
    case 1: self = .metadataUpdate
    case 2: self = .metadataClear
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .metadataNoop: return 0
    case .metadataUpdate: return 1
    case .metadataClear: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Pb_MetadataOperation: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Pb_MetadataOperation] = [
    .metadataNoop,
    .metadataUpdate,
    .metadataClear,
  ]
}

#endif  // swift(>=4.2)

enum Pb_ControlCommand: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case `open` // = 1
  case close // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .open
    case 2: self = .close
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .open: return 1
    case .close: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Pb_ControlCommand: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Pb_ControlCommand] = [
    .unknown,
    .open,
    .close,
  ]
}

#endif  // swift(>=4.2)

/// Message format for bidirectional streaming
struct Pb_MessageRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var messageAcknowledgement: [Pb_MessageAcknowledgement] = []

  var controlMessage: Pb_ControlMessage {
    get {return _controlMessage ?? Pb_ControlMessage()}
    set {_controlMessage = newValue}
  }
  /// Returns true if `controlMessage` has been explicitly set.
  var hasControlMessage: Bool {return self._controlMessage != nil}
  /// Clears the value of `controlMessage`. Subsequent reads from it will return its default value.
  mutating func clearControlMessage() {self._controlMessage = nil}

  var userID: String = String()

  var sessionID: String = String()

  var tags: [String] = []

  var customEvent: Pb_CustomEvent {
    get {return _customEvent ?? Pb_CustomEvent()}
    set {_customEvent = newValue}
  }
  /// Returns true if `customEvent` has been explicitly set.
  var hasCustomEvent: Bool {return self._customEvent != nil}
  /// Clears the value of `customEvent`. Subsequent reads from it will return its default value.
  mutating func clearCustomEvent() {self._customEvent = nil}

  var metadata: String = String()

  var deviceID: String = String()

  var metadataOperation: Pb_MetadataOperation = .metadataNoop

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _controlMessage: Pb_ControlMessage? = nil
  fileprivate var _customEvent: Pb_CustomEvent? = nil
}

/// Response format for bidirectional streaming
struct Pb_MessageResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var data: Pb_MessageResponse.OneOf_Data? = nil

  var messages: Pb_Messages {
    get {
      if case .messages(let v)? = data {return v}
      return Pb_Messages()
    }
    set {data = .messages(newValue)}
  }

  var controlMessage: Pb_ControlMessage {
    get {
      if case .controlMessage(let v)? = data {return v}
      return Pb_ControlMessage()
    }
    set {data = .controlMessage(newValue)}
  }

  var connectionAcknowledgement: Pb_ConnectionAcknowledgement {
    get {
      if case .connectionAcknowledgement(let v)? = data {return v}
      return Pb_ConnectionAcknowledgement()
    }
    set {data = .connectionAcknowledgement(newValue)}
  }

  var heartbeat: Pb_Heartbeat {
    get {
      if case .heartbeat(let v)? = data {return v}
      return Pb_Heartbeat()
    }
    set {data = .heartbeat(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Data: Equatable {
    case messages(Pb_Messages)
    case controlMessage(Pb_ControlMessage)
    case connectionAcknowledgement(Pb_ConnectionAcknowledgement)
    case heartbeat(Pb_Heartbeat)

  #if !swift(>=4.1)
    static func ==(lhs: Pb_MessageResponse.OneOf_Data, rhs: Pb_MessageResponse.OneOf_Data) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.messages, .messages): return {
        guard case .messages(let l) = lhs, case .messages(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.controlMessage, .controlMessage): return {
        guard case .controlMessage(let l) = lhs, case .controlMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.connectionAcknowledgement, .connectionAcknowledgement): return {
        guard case .connectionAcknowledgement(let l) = lhs, case .connectionAcknowledgement(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.heartbeat, .heartbeat): return {
        guard case .heartbeat(let l) = lhs, case .heartbeat(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

/// Acknowledgement for individual messages
struct Pb_MessageAcknowledgement {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var traceID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Acknowledgement for connecting to the server
struct Pb_ConnectionAcknowledgement {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var connectionID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// List of messages
struct Pb_Messages {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var message: [Pb_Message] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Message payload
struct Pb_Message {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var traceID: String = String()

  var content: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Control message payload
struct Pb_ControlMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// e.g., "open", "close"
  var command: Pb_ControlCommand = .unknown

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Heartbeat message payload
struct Pb_Heartbeat {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// e.g., "alive"
  var status: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pb_CustomEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var metadata: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Pb_MetadataOperation: @unchecked Sendable {}
extension Pb_ControlCommand: @unchecked Sendable {}
extension Pb_MessageRequest: @unchecked Sendable {}
extension Pb_MessageResponse: @unchecked Sendable {}
extension Pb_MessageResponse.OneOf_Data: @unchecked Sendable {}
extension Pb_MessageAcknowledgement: @unchecked Sendable {}
extension Pb_ConnectionAcknowledgement: @unchecked Sendable {}
extension Pb_Messages: @unchecked Sendable {}
extension Pb_Message: @unchecked Sendable {}
extension Pb_ControlMessage: @unchecked Sendable {}
extension Pb_Heartbeat: @unchecked Sendable {}
extension Pb_CustomEvent: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "pb"

extension Pb_MetadataOperation: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "METADATA_NOOP"),
    1: .same(proto: "METADATA_UPDATE"),
    2: .same(proto: "METADATA_CLEAR"),
  ]
}

extension Pb_ControlCommand: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "OPEN"),
    2: .same(proto: "CLOSE"),
  ]
}

extension Pb_MessageRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MessageRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "message_acknowledgement"),
    2: .standard(proto: "control_message"),
    3: .standard(proto: "user_id"),
    4: .standard(proto: "session_id"),
    5: .same(proto: "tags"),
    6: .standard(proto: "custom_event"),
    7: .same(proto: "metadata"),
    8: .standard(proto: "device_id"),
    9: .standard(proto: "metadata_operation"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.messageAcknowledgement) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._controlMessage) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.userID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.sessionID) }()
      case 5: try { try decoder.decodeRepeatedStringField(value: &self.tags) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._customEvent) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.metadata) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.deviceID) }()
      case 9: try { try decoder.decodeSingularEnumField(value: &self.metadataOperation) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.messageAcknowledgement.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.messageAcknowledgement, fieldNumber: 1)
    }
    try { if let v = self._controlMessage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 3)
    }
    if !self.sessionID.isEmpty {
      try visitor.visitSingularStringField(value: self.sessionID, fieldNumber: 4)
    }
    if !self.tags.isEmpty {
      try visitor.visitRepeatedStringField(value: self.tags, fieldNumber: 5)
    }
    try { if let v = self._customEvent {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    if !self.metadata.isEmpty {
      try visitor.visitSingularStringField(value: self.metadata, fieldNumber: 7)
    }
    if !self.deviceID.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceID, fieldNumber: 8)
    }
    if self.metadataOperation != .metadataNoop {
      try visitor.visitSingularEnumField(value: self.metadataOperation, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pb_MessageRequest, rhs: Pb_MessageRequest) -> Bool {
    if lhs.messageAcknowledgement != rhs.messageAcknowledgement {return false}
    if lhs._controlMessage != rhs._controlMessage {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.sessionID != rhs.sessionID {return false}
    if lhs.tags != rhs.tags {return false}
    if lhs._customEvent != rhs._customEvent {return false}
    if lhs.metadata != rhs.metadata {return false}
    if lhs.deviceID != rhs.deviceID {return false}
    if lhs.metadataOperation != rhs.metadataOperation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pb_MessageResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MessageResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "messages"),
    2: .standard(proto: "control_message"),
    3: .standard(proto: "connection_acknowledgement"),
    4: .same(proto: "heartbeat"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Pb_Messages?
        var hadOneofValue = false
        if let current = self.data {
          hadOneofValue = true
          if case .messages(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.data = .messages(v)
        }
      }()
      case 2: try {
        var v: Pb_ControlMessage?
        var hadOneofValue = false
        if let current = self.data {
          hadOneofValue = true
          if case .controlMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.data = .controlMessage(v)
        }
      }()
      case 3: try {
        var v: Pb_ConnectionAcknowledgement?
        var hadOneofValue = false
        if let current = self.data {
          hadOneofValue = true
          if case .connectionAcknowledgement(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.data = .connectionAcknowledgement(v)
        }
      }()
      case 4: try {
        var v: Pb_Heartbeat?
        var hadOneofValue = false
        if let current = self.data {
          hadOneofValue = true
          if case .heartbeat(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.data = .heartbeat(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.data {
    case .messages?: try {
      guard case .messages(let v)? = self.data else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .controlMessage?: try {
      guard case .controlMessage(let v)? = self.data else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .connectionAcknowledgement?: try {
      guard case .connectionAcknowledgement(let v)? = self.data else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .heartbeat?: try {
      guard case .heartbeat(let v)? = self.data else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pb_MessageResponse, rhs: Pb_MessageResponse) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pb_MessageAcknowledgement: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MessageAcknowledgement"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "trace_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.traceID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.traceID.isEmpty {
      try visitor.visitSingularStringField(value: self.traceID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pb_MessageAcknowledgement, rhs: Pb_MessageAcknowledgement) -> Bool {
    if lhs.traceID != rhs.traceID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pb_ConnectionAcknowledgement: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConnectionAcknowledgement"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "connection_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.connectionID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.connectionID.isEmpty {
      try visitor.visitSingularStringField(value: self.connectionID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pb_ConnectionAcknowledgement, rhs: Pb_ConnectionAcknowledgement) -> Bool {
    if lhs.connectionID != rhs.connectionID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pb_Messages: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Messages"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.message) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.message.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.message, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pb_Messages, rhs: Pb_Messages) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pb_Message: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Message"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "trace_id"),
    2: .same(proto: "content"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.traceID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.content) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.traceID.isEmpty {
      try visitor.visitSingularStringField(value: self.traceID, fieldNumber: 1)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pb_Message, rhs: Pb_Message) -> Bool {
    if lhs.traceID != rhs.traceID {return false}
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pb_ControlMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ControlMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "command"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.command) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.command != .unknown {
      try visitor.visitSingularEnumField(value: self.command, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pb_ControlMessage, rhs: Pb_ControlMessage) -> Bool {
    if lhs.command != rhs.command {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pb_Heartbeat: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Heartbeat"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.status) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pb_Heartbeat, rhs: Pb_Heartbeat) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pb_CustomEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CustomEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "metadata"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.metadata) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.metadata.isEmpty {
      try visitor.visitSingularStringField(value: self.metadata, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pb_CustomEvent, rhs: Pb_CustomEvent) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.metadata != rhs.metadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
